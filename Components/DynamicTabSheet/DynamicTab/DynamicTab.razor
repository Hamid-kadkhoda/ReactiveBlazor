@namespace ReactiveBlazor

@inherits BaseComponent

<div class="dynamic-tab">
    @if (tabManager.Tabs.Any())
    {
        <div class="dynamic-tab-header">
            @foreach (var tab in tabManager.Tabs)
            {
                <DynamicTabNavButton OnRemove="() => OnRemoveTab(tab)"
                                     OnClick="() => OnActivateTab(tab)"
                                     IsActive="tab.IsActive"
                                     Value="@tab.Title">
                </DynamicTabNavButton>
            }
        </div>

        <div>
            @foreach (var tab in tabManager.Tabs)
            {
                <div class="@(tab.IsActive ? "block" : "hidden")">
                    <div class="dynamic-tab-content">
                        <CascadingValue Name="ParentTab" Value="@tab">
                            @if (tab.Sheets.Any())
                            {
                                @foreach (var sheet in tab.Sheets)
                                {
                                    <div class="@(sheet.IsActive ? "block" : "hidden")">
                                        <CascadingValue Name="ParentSheet" Value="@sheet">
                                            @{
                                        var parameters = new Dictionary<string, object?>();
                                        parameters.Add("Data", sheet.Data);

                                        <DynamicComponent Parameters="@parameters" Type="@sheet.Content" />
                                    }
                                </CascadingValue>
                            </div>
                                }
                            }
                        </CascadingValue>
                    </div>
                    <div class="dynamic-tab-footer">
                        @foreach (var sheet in tab.Sheets)
                        {
                            <DynamicTabNavButton OnRemove="() => OnRemoveSheet(sheet)"
                                                 OnClick="() => OnActivateSheet(sheet)"
                                                 IsActive="sheet.IsActive"
                                                 Value="@sheet.Title">
                            </DynamicTabNavButton>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {

    [Inject] public TabManager tabManager { get; set; } = default!;

    protected override void OnInitialized()
    {
        tabManager.TabsChanged += StateHasChanged;
    }

    private void OnActivateTab(DynamicTabPanel tab)
    {
        tabManager.ActivateTab(tab);
    }

    private void OnActivateSheet(DynamicSheetPanel sheet)
    {
        tabManager.ActivateSheet(sheet);
    }

    private void OnRemoveTab(DynamicTabPanel tab)
    {
        tabManager.RemoveTab(tab);
    }

    private void OnRemoveSheet(DynamicSheetPanel sheet)
    {
        tabManager.RemoveSheet(sheet);
    }
}
