@using System.Reflection
@using System.Linq.Expressions

@namespace ReactiveBlazor

@typeparam TItem

<div class="data-grid">
    <table data-grid>
        <thead>
            <tr>
                @foreach (var property in typeof(TItem).GetProperties())
                {
                    <th>
                        <div class="column-header">
                            <span>@property.Name</span>
                            <div class="column-header-filter">
                                <button @onclick="() => SortBy(property.Name)">
                                    <svg width="16" height="16"
                                         viewBox="0 0 24 24"
                                         fill="none" stroke="currentColor"
                                         stroke-width="2" stroke-linecap="round"
                                         stroke-linejoin="round" class="icon icon-tabler
                                        icons-tabler-outline icon-tabler-arrows-down-up">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M17 3l0 18" />
                                        <path d="M10 18l-3 3l-3 -3" />
                                        <path d="M7 21l0 -18" />
                                        <path d="M20 6l-3 -3l-3 3" />
                                    </svg>

                                </button>
                                <input type="text"
                                       @oninput="(e) => FilterBy(property.Name, e.Value?.ToString())"
                                       placeholder="Filter..." />
                            </div>
                        </div>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @if (FilteredAndSortedItems != null)
            {
                @foreach (var item in FilteredAndSortedItems)
                {
                    <tr>
                        @foreach (var property in typeof(TItem).GetProperties())
                        {
                            <td class="px-2 py-1">@property.GetValue(item)</td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {

    [Parameter] public IEnumerable<TItem>? Items { get; set; }

    private IEnumerable<TItem>? FilteredAndSortedItems => ApplySortingAndFiltering(Items);

    private Dictionary<string, string> Filters { get; set; } = new Dictionary<string, string>();

    private string? SortColumn { get; set; }

    private bool SortAscending { get; set; } = true;

    private void SortBy(string columnName)
    {
        if (SortColumn == columnName)
        {
            SortAscending = !SortAscending;
        }
        else
        {
            SortColumn = columnName;
            SortAscending = true;
        }
    }

    private void FilterBy(string columnName, string? filterValue)
    {
        if (string.IsNullOrWhiteSpace(filterValue))
        {
            Filters.Remove(columnName);
        }
        else
        {
            Filters[columnName] = filterValue;
        }
    }

    private IEnumerable<TItem>? ApplySortingAndFiltering(IEnumerable<TItem>? items)
    {

        if (items == null) return null;

        var query = items.AsQueryable();

        foreach (var filter in Filters)
        {
            var property = typeof(TItem).GetProperty(filter.Key);
            if (property != null)
            {
                var parameter = Expression.Parameter(typeof(TItem), "x");
                var propertyAccess = Expression.Property(parameter, property);
                var constant = Expression.Constant(filter.Value, typeof(string));
                var containsMethod = typeof(string).GetMethod("Contains", new[] { typeof(string) });
                var containsExpression = Expression.Call(propertyAccess, containsMethod!, constant);
                var lambda = Expression.Lambda<Func<TItem, bool>>(containsExpression, parameter);
                query = query.Where(lambda);
            }
        }

        if (!string.IsNullOrEmpty(SortColumn))
        {
            var property = typeof(TItem).GetProperty(SortColumn);
            if (property != null)
            {
                var parameter = Expression.Parameter(typeof(TItem), "x");
                var propertyAccess = Expression.Property(parameter, property);
                var lambda = Expression.Lambda<Func<TItem, object>>(Expression.Convert(propertyAccess, typeof(object)), parameter);

                query = SortAscending ? query.OrderBy(lambda) : query.OrderByDescending(lambda);
            }
        }

        return query.ToList();
    }
}